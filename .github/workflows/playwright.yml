name: UI Automation with VPN

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Test environment"
        required: true
        default: "stag"
        type: choice
        options:
          - stag
          - prod
          - dev

jobs:
  playwright-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install WireGuard and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wireguard-tools resolvconf iptables dnsutils curl

      - name: Setup WireGuard VPN with enhanced configuration
        env:
          WG_PRIVATE_KEY: ${{ secrets.WG_PRIVATE_KEY }}
          WG_PRESHARED_KEY: ${{ secrets.WG_PRESHARED_KEY }}
        run: |
          echo "=== Setting up WireGuard VPN ==="

          # Create WireGuard configuration with optimized settings
          sudo tee /etc/wireguard/wg0.conf > /dev/null <<EOF
          [Interface]
          PrivateKey = ${WG_PRIVATE_KEY}
          Address = 10.0.0.10/24
          DNS = 1.1.1.1, 8.8.8.8
          MTU = 1420

          [Peer]
          PublicKey = DdlxB8CIQ72tZ6bWe3NU/ZC50SKIqKgmiHusPM4liAI=
          PresharedKey = ${WG_PRESHARED_KEY}
          AllowedIPs = 0.0.0.0/0, ::/0
          PersistentKeepalive = 25
          Endpoint = vpn.juliusworks.com:33048
          EOF

          # Set proper permissions
          sudo chmod 600 /etc/wireguard/wg0.conf

          # Enable IP forwarding
          echo 'net.ipv4.ip_forward = 1' | sudo tee -a /etc/sysctl.conf
          echo 'net.ipv6.conf.all.forwarding = 1' | sudo tee -a /etc/sysctl.conf
          sudo sysctl -p

          echo "=== Starting WireGuard interface ==="
          # Start WireGuard interface
          sudo wg-quick up wg0

          # Wait for interface to be fully up
          sleep 10

          echo "=== Verifying WireGuard status ==="
          sudo wg show

          # Check if interface is properly configured
          ip addr show wg0

          echo "=== Checking routing table ==="
          ip route show

          echo "=== Testing basic connectivity ==="
          # Test basic internet connectivity through VPN
          for i in {1..5}; do
            echo "Attempt $i: Testing connectivity..."
            if ping -c 2 -W 3 1.1.1.1; then
              echo "✓ Basic connectivity successful"
              break
            else
              echo "✗ Basic connectivity failed, retrying..."
              sleep 5
            fi
          done

          echo "=== Testing DNS resolution ==="
          for i in {1..3}; do
            echo "Attempt $i: Testing DNS..."
            if nslookup app.juliusdev.net 1.1.1.1; then
              echo "✓ DNS resolution successful"
              break
            else
              echo "✗ DNS resolution failed, retrying..."
              sleep 5
            fi
          done

          echo "=== Testing target application connectivity ==="
          for i in {1..5}; do
            echo "Attempt $i: Testing app connectivity..."
            if curl -I --connect-timeout 10 --max-time 20 https://app.juliusdev.net/login; then
              echo "✓ Application connectivity successful"
              break
            else
              echo "✗ Application connectivity failed, retrying..."
              sleep 10
            fi
          done

          # Additional verification
          echo "=== Final connectivity verification ==="
          curl -v --connect-timeout 15 --max-time 30 https://app.juliusdev.net/login || {
            echo "❌ CRITICAL: Cannot reach target application"
            echo "=== Network debugging info ==="
            ip route get 1.1.1.1
            dig app.juliusdev.net
            sudo wg show
            exit 1
          }

          echo "✅ VPN setup completed successfully"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Configure Playwright for VPN environment
        run: |
          # Create playwright config override for VPN environment
          cat >> playwright.config.js << 'EOF'
          // VPN environment overrides
          module.exports = {
            ...require('./playwright.config.js'),
            timeout: 90000, // 90 seconds
            expect: {
              timeout: 15000 // 15 seconds for assertions
            },
            use: {
              ...require('./playwright.config.js').use,
              navigationTimeout: 60000, // 60 seconds for navigation
              actionTimeout: 30000, // 30 seconds for actions
            },
            projects: [
              {
                name: 'chromium',
                use: {
                  ...devices['Desktop Chrome'],
                  launchOptions: {
                    args: ['--disable-web-security', '--disable-features=VizDisplayCompositor']
                  }
                }
              }
            ]
          };
          EOF

      - name: Final pre-test connectivity check
        run: |
          echo "=== Final connectivity verification before tests ==="
          echo "Testing basic connectivity..."
          ping -c 3 1.1.1.1 || echo "Basic ping failed"

          echo "Testing application endpoint..."
          curl -I --connect-timeout 15 --max-time 30 https://app.juliusdev.net/login || {
            echo "❌ FINAL CHECK FAILED: Cannot reach application"
            sudo wg show
            ip route show
            exit 1
          }

          echo "✅ All connectivity checks passed"

      - name: Run Playwright tests
        env:
          TEST_ENV: ${{ github.event.inputs.environment }}
          PWDEBUG: 0
        run: |
          echo "Running tests against $TEST_ENV environment"
          echo "Using extended timeouts for VPN environment"
          npx playwright test --project=chromium --timeout=90000 --reporter=list
        continue-on-error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results-${{ github.event.inputs.environment }}
          path: |
            playwright-report/
            test-results/
            result/
          retention-days: 7

      - name: Debug info on failure
        if: failure()
        run: |
          echo "=== Debug info for failed run ==="
          sudo wg show
          ip route show
          ip addr show wg0
          curl -v https://app.juliusdev.net/login || echo "Curl test failed"

      - name: Cleanup WireGuard
        if: always()
        run: |
          echo "Cleaning up WireGuard connection..."
          sudo wg-quick down wg0 || echo "WireGuard interface already down"
