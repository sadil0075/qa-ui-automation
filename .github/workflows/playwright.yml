name: UI Automation Stag & Preview

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Test environment"
        required: true
        default: "stag"
        type: choice
        options:
          - stag
          - prod
          - dev

jobs:
  playwright-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install WireGuard and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wireguard-tools resolvconf iptables dnsutils curl

      - name: Setup WireGuard VPN
        env:
          WG_PRIVATE_KEY: ${{ secrets.WG_PRIVATE_KEY }}
          WG_PRESHARED_KEY: ${{ secrets.WG_PRESHARED_KEY }}
        run: |
          echo "=== Setting up WireGuard VPN ==="

          sudo tee /etc/wireguard/wg0.conf > /dev/null <<EOF
          [Interface]
          PrivateKey = ${WG_PRIVATE_KEY}
          Address = 10.0.0.10/24
          DNS = 1.1.1.1, 8.8.8.8
          MTU = 1420

          [Peer]
          PublicKey = DdlxB8CIQ72tZ6bWe3NU/ZC50SKIqKgmiHusPM4liAI=
          PresharedKey = ${WG_PRESHARED_KEY}
          AllowedIPs = 0.0.0.0/0, ::/0
          PersistentKeepalive = 25
          Endpoint = vpn.juliusworks.com:33048
          EOF

          sudo chmod 600 /etc/wireguard/wg0.conf
          sudo wg-quick up wg0
          sleep 10

          curl -v --connect-timeout 15 --max-time 30 https://app.juliusdev.net/login || {
            echo "❌ CRITICAL: Cannot reach target application"
            exit 1
          }

          echo "✅ VPN setup completed successfully"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers with system dependencies
        run: |
          npx playwright install --with-deps chromium
          npx playwright --version

      - name: Configure system for browser stability
        run: |
          sudo mount -o remount,size=2G /dev/shm
          sudo sysctl -w vm.swappiness=10
          sudo sysctl -w vm.overcommit_memory=1

      - name: Run Playwright tests with correct config path
        env:
          TEST_ENV: ${{ github.event.inputs.environment }}
          NODE_OPTIONS: "--max-old-space-size=4096"
          PWDEBUG: 0
        run: |
          echo "Running tests against $TEST_ENV environment with CI optimizations"
          ulimit -n 8192

          # Use the correct config file path (root directory)
          npx playwright test \
            --config=playwright.config.js \
            --reporter=html,list \
            --project=chromium \
            --timeout=120000 \
            || echo "Tests completed with some failures (expected for artifact generation)"
        continue-on-error: true

      - name: Check test result locations after run
        if: always()
        run: |
          echo "=== Post-test directory scan ==="
          pwd && ls -la

          echo "=== Looking for generated reports ==="
          find . -name "*playwright-report*" -type d 2>/dev/null || echo "No playwright-report directories found"
          find . -name "*test-results*" -type d 2>/dev/null || echo "No test-results directories found"

          echo "=== Checking default Playwright locations ==="
          ls -la playwright-report/ 2>/dev/null && echo "✅ Found: playwright-report/" || echo "❌ No playwright-report/"
          ls -la test-results/ 2>/dev/null && echo "✅ Found: test-results/" || echo "❌ No test-results/"

          echo "=== Checking for any HTML files ==="
          find . -name "index.html" 2>/dev/null | grep -v node_modules || echo "No index.html files found"

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results-${{ github.event.inputs.environment }}
          path: |
            playwright-report/
            test-results/
            **/*.html
            **/*.webm
            **/*.png
            **/*.zip
          retention-days: 7

      - name: Cleanup WireGuard
        if: always()
        run: |
          echo "Cleaning up WireGuard connection..."
          sudo wg-quick down wg0 || echo "WireGuard interface already down"
