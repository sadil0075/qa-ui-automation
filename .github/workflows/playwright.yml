name: Playwright Tests with VPN

on:
  workflow_dispatch:                 # manual-run dropdown
    inputs:
      environment:
        description: "Target environment"
        required: false
        type: choice
        default: "stag"
        options: [stag]
      browser:
        description: "Playwright project"
        required: false
        type: choice
        default: "chromium"
        options: [chromium, firefox, webkit]

  schedule:                          # nightly run at 02:00 UTC (optional)
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    environment: ${{ github.event.inputs.environment || 'stag' }}

    steps:
    # â–¸ Source
    - name: Checkout repository
      uses: actions/checkout@v4

    # â–¸ VPN
    - name: Install WireGuard
      run: |
        sudo apt-get update -y
        sudo apt-get install -y wireguard

    - name: Configure & start WireGuard
      env:
        WG_PRIVATE_KEY:  ${{ secrets.WG_PRIVATE_KEY }}
        WG_PUBLIC_KEY:   ${{ secrets.WG_PUBLIC_KEY }}
        WG_PRESHARED_KEY:${{ secrets.WG_PRESHARED_KEY }}
        WG_ENDPOINT:     ${{ secrets.WG_ENDPOINT }}
      run: |
        sudo mkdir -p /etc/wireguard
        printf '[Interface]\nPrivateKey = %s\nAddress = 10.0.0.10/24\nDNS = 1.1.1.1\n\n[Peer]\nPublicKey = %s\nPresharedKey = %s\nAllowedIPs = 0.0.0.0/0, ::/0\nEndpoint = %s\nPersistentKeepalive = 25\n' \
          "$WG_PRIVATE_KEY" "$WG_PUBLIC_KEY" "$WG_PRESHARED_KEY" "$WG_ENDPOINT" \
          | sudo tee /etc/wireguard/wg0.conf >/dev/null
        sudo chmod 600 /etc/wireguard/wg0.conf
        sudo wg-quick --quiet up /etc/wireguard/wg0.conf
        echo 'âœ… WireGuard up'

    # â–¸ Quick connectivity smoke-test (optional)
    - run: |
        curl -s ifconfig.me || true
        ping -c 3 8.8.8.8 || true

    # â–¸ Node / Playwright
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'
        cache: npm

    - name: Install dependencies
      run: npm ci || (echo 'npm ci failed â€“ running npm install' && npm install)

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Run Playwright tests
      env:
        CI: true
        TEST_ENV: ${{ github.event.inputs.environment }}
      run: |
        if [ "${{ github.event.inputs.browser }}" = "all" ]; then
          npx playwright test
        else
          npx playwright test --project=${{ github.event.inputs.browser }}
        fi

    # â–¸ Artifacts & summary
    - name: Upload HTML report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report-${{ github.event.inputs.browser || 'chromium' }}-${{ github.run_number }}
        path: result/playwright-report
        retention-days: 30

    - name: Upload raw results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ github.event.inputs.browser || 'chromium' }}-${{ github.run_number }}
        path: result/test-results
        retention-days: 30

    - name: Job summary
      if: always()
      run: |
        {
          echo '## ðŸŽ­ Playwright Test Summary'
          echo "- **Environment**:  ${{ github.event.inputs.environment }}"
          echo "- **Browser**:      ${{ github.event.inputs.browser }}"
          echo "- **Run Number**:   ${{ github.run_number }}"
          echo "- **Timestamp**:    $(date -u)"
          echo "- **VPN**:          âœ… Connected via WireGuard"
          echo
          echo 'Artifacts: HTML report & raw results attached.'
        } >>"$GITHUB_STEP_SUMMARY"

    # â–¸ VPN teardown
    - name: Disconnect WireGuard
      if: always()
      run: |
        sudo wg-quick down /etc/wireguard/wg0.conf || true
        sudo rm -f /etc/wireguard/wg0.conf
        echo 'ðŸ”’ WireGuard down'
