name: UI Automation Stag & Preview

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Test environment"
        required: true
        default: "stag"
        type: choice
        options:
          - stag
          - prod
          - dev

jobs:
  playwright-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install WireGuard and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wireguard-tools resolvconf iptables dnsutils curl

      - name: Setup WireGuard VPN
        env:
          WG_PRIVATE_KEY: ${{ secrets.WG_PRIVATE_KEY }}
          WG_PRESHARED_KEY: ${{ secrets.WG_PRESHARED_KEY }}
        run: |
          echo "=== Setting up WireGuard VPN ==="

          sudo tee /etc/wireguard/wg0.conf > /dev/null <<EOF
          [Interface]
          PrivateKey = ${WG_PRIVATE_KEY}
          Address = 10.0.0.10/24
          DNS = 1.1.1.1, 8.8.8.8
          MTU = 1420

          [Peer]
          PublicKey = DdlxB8CIQ72tZ6bWe3NU/ZC50SKIqKgmiHusPM4liAI=
          PresharedKey = ${WG_PRESHARED_KEY}
          AllowedIPs = 0.0.0.0/0, ::/0
          PersistentKeepalive = 25
          Endpoint = vpn.juliusworks.com:33048
          EOF

          sudo chmod 600 /etc/wireguard/wg0.conf
          sudo wg-quick up wg0
          sleep 10

          curl -v --connect-timeout 15 --max-time 30 https://app.juliusdev.net/login || {
            echo "❌ CRITICAL: Cannot reach target application"
            exit 1
          }

          echo "✅ VPN setup completed successfully"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers with system dependencies
        run: |
          npx playwright install --with-deps chromium
          npx playwright --version

      - name: Configure system for browser stability
        run: |
          sudo mount -o remount,size=2G /dev/shm
          sudo sysctl -w vm.swappiness=10
          sudo sysctl -w vm.overcommit_memory=1

      - name: Create optimized Playwright config for CI
        run: |
          cat > playwright.ci.config.js << 'EOF'
          const { defineConfig, devices } = require('@playwright/test');

          module.exports = defineConfig({
            testDir: './playwright-automation-framework/src/tests',
            fullyParallel: false,
            forbidOnly: !!process.env.CI,
            retries: 2,
            workers: 1,
            reporter: [
              ['list'], 
              ['html', { open: 'never' }]
            ],
            timeout: 120000,
            expect: {
              timeout: 20000
            },
            use: {
              baseURL: 'https://app.juliusdev.net',
              trace: 'retain-on-failure',
              video: 'retain-on-failure',
              screenshot: 'only-on-failure',
              navigationTimeout: 60000,
              actionTimeout: 30000,
            },
            projects: [
              {
                name: 'chromium',
                use: {
                  ...devices['Desktop Chrome'],
                  launchOptions: {
                    args: [
                      '--no-sandbox',
                      '--disable-setuid-sandbox',
                      '--disable-dev-shm-usage',
                      '--disable-web-security',
                      '--disable-features=VizDisplayCompositor',
                      '--disable-gpu',
                      '--disable-background-timer-throttling',
                      '--disable-backgrounding-occluded-windows',
                      '--disable-renderer-backgrounding',
                      '--disable-field-trial-config',
                      '--disable-ipc-flooding-protection',
                      '--memory-pressure-off',
                      '--max_old_space_size=4096'
                    ],
                    timeout: 60000,
                  },
                  viewport: { width: 1280, height: 720 },
                }
              }
            ]
          });
          EOF

      - name: Run Playwright tests with stability optimizations
        env:
          TEST_ENV: ${{ github.event.inputs.environment }}
          NODE_OPTIONS: "--max-old-space-size=4096"
          PWDEBUG: 0
        run: |
          echo "Running tests against $TEST_ENV environment with CI optimizations"
          ulimit -n 8192
          npx playwright test --config=playwright.ci.config.js --reporter=list --max-failures=1 --timeout=120000
        continue-on-error: false

      - name: Check test result directories
        if: always()
        run: |
          echo "=== Checking for test result directories ==="
          pwd
          ls -la
          echo "--- All directories and files ---"
          find . -type d -name "*report*" -o -type d -name "*result*" | head -10
          echo "--- Checking specific paths ---"
          ls -la result/playwright-report/ 2>/dev/null && echo "✅ result/playwright-report/ exists" || echo "❌ result/playwright-report/ not found"
          ls -la result/test-results/ 2>/dev/null && echo "✅ result/test-results/ exists" || echo "❌ result/test-results/ not found"
          ls -la playwright-report/ 2>/dev/null && echo "✅ playwright-report/ exists" || echo "❌ playwright-report/ not found"
          ls -la test-results/ 2>/dev/null && echo "✅ test-results/ exists" || echo "❌ test-results/ not found"

      - name: Upload test results (correct paths)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results-${{ github.event.inputs.environment }}
          path: |
            result/playwright-report/
            result/test-results/
          retention-days: 7

      - name: Cleanup WireGuard
        if: always()
        run: |
          echo "Cleaning up WireGuard connection..."
          sudo wg-quick down wg0 || echo "WireGuard interface already down"
